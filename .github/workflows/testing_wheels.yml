# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI Python wheels tests
run-name: Build all Python wheels and test them

on:
  push:
    branches:
      - master
      - main

  # Build wheels for any PRs.
  pull_request:

  # Allow manual invocation, for testing.
  workflow_dispatch:
    inputs:
      trace:
        description: 'Turn on shell script debugging'
        type: boolean
        default: true

# Cancel any previously-started but still active runs on the same branch.
concurrency:
  cancel-in-progress: true
  group: ${{github.workflow}}-${{github.event.pull_request.number||github.ref}}

# Declare default workflow permissions to be read-only.
permissions: read-all

jobs:
  build_wheels:
    name: >-
      Build wheel
      ${{matrix.conf.os}}/${{matrix.conf.pyarch}}/py3${{matrix.conf.py}}
    runs-on: ${{matrix.conf.os}}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        # See the following page for a list of valid cibuildwheel arch values:
        # https://cibuildwheel.pypa.io/en/stable/options/#archs
        conf: [
          {os: ubuntu-24.04, wh: manylinux, arch: x86_64, pyarch: x64, py: 10},
          {os: ubuntu-24.04, wh: manylinux, arch: x86_64, pyarch: x64, py: 11},
          {os: ubuntu-24.04, wh: manylinux, arch: x86_64, pyarch: x64, py: 12},
          {os: ubuntu-24.04, wh: manylinux, arch: x86_64, pyarch: x64, py: 13},

          {os: macos-13, wh: macosx, arch: x86_64, pyarch: x64, py: 10},
          {os: macos-13, wh: macosx, arch: x86_64, pyarch: x64, py: 11},
          {os: macos-13, wh: macosx, arch: x86_64, pyarch: x64, py: 12},
          {os: macos-13, wh: macosx, arch: x86_64, pyarch: x64, py: 13},

          {os: macos-14, wh: macosx, arch: arm64, pyarch: arm64, py: 10},
          {os: macos-14, wh: macosx, arch: arm64, pyarch: arm64, py: 11},
          {os: macos-14, wh: macosx, arch: arm64, pyarch: arm64, py: 12},
          {os: macos-14, wh: macosx, arch: arm64, pyarch: arm64, py: 13},

          {os: macos-15, wh: macosx, arch: arm64, pyarch: arm64, py: 10},
          {os: macos-15, wh: macosx, arch: arm64, pyarch: arm64, py: 11},
          {os: macos-15, wh: macosx, arch: arm64, pyarch: arm64, py: 12},
          {os: macos-15, wh: macosx, arch: arm64, pyarch: arm64, py: 13},

          {os: windows-2019, wh: win, arch: AMD64, pyarch: x64, py: 10},
          {os: windows-2019, wh: win, arch: AMD64, pyarch: x64, py: 11},
          {os: windows-2019, wh: win, arch: AMD64, pyarch: x64, py: 12},
          # This fails with NumPy 1.x. TODO: uncomment when qsim supports np 2.
          # {os: windows-2019, wh: win, arch: AMD64, pyarch: x64, py: 13},
        ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: actions/setup-python@v5
        id: setup
        with:
          python-version: '3.${{matrix.conf.py}}'
          architecture: ${{matrix.conf.pyarch}}
          cache: pip
          cache-dependency-path: requirements.txt

      - uses: bazel-contrib/setup-bazel@0.15.0
        with:
          disk-cache: ${{github.workflow}}
          bazelisk-cache: true
          external-cache: true
          repository-cache: true
          bazelrc: |
            common --announce_rc
            common --verbose_failures
            common --auto_output_filter=none
            common --remote_upload_local_results=false
            common --jobs 2

      - run: python -m pip install -r requirements.txt

      - if: matrix.conf.os != 'windows-2019'
        env:
          # SHELLOPTS is used by Bash. Add xtrace when doing manual debug runs.
          SHELLOPTS: ${{inputs.trace && 'xtrace' || '' }}
        run: dev_tools/test_libs.sh

      - if: matrix.conf.os == 'windows-2019'
        env:
          pyroot: 'C:\\hostedtoolcache\\windows\\Python'
          pyexe: '${{steps.setup.outputs.python-version}}\\${{matrix.conf.pyarch}}\\python3.exe'
          SHELLOPTS: ${{inputs.trace && 'xtrace' || '' }}
        shell: cmd
        run: |
          bash dev_tools/test_libs.sh --action_env PYTHON_BIN_PATH=${{env.pyroot}}\\${{env.pyexe}}

      - if: startsWith(matrix.conf.os, 'macos')
        run: |
          set -x
          os=${{matrix.conf.os}}
          echo MACOSX_DEPLOYMENT_TARGET=${os: -2} >> "$GITHUB_ENV"

      - name: Build and test wheels
        env:
          # Note: additional cibuildwheel settings are in pyproject.toml.
          CIBW_ARCHS: ${{matrix.conf.arch}}
          CIBW_BUILD: cp3${{matrix.conf.py}}-${{matrix.conf.wh}}_${{matrix.conf.arch}}
        run: |
          python -m pip install cibuildwheel==2.23.3 virtualenv==20.31.2 cmake
          python -m cibuildwheel --output-dir wheelhouse
