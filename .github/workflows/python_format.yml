# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'CI: Python format tests'
run-name: Check style and format of Python code

on:
  push:
    branches:
      - master
      - main

  pull_request:
    types: [opened, synchronize]

  merge_group:
    types:
      - checks_requested

  workflow_dispatch:
    inputs:
      trace:
        description: 'Turn on shell script debugging'
        type: boolean
        default: true

permissions: read-all

concurrency:
  # Cancel any previously-started but still active runs on the same branch.
  cancel-in-progress: true
  group: ${{github.workflow}}-${{github.event.pull_request.number||github.ref}}

jobs:
  # For efficiency, we skip this workflow if there were no Python file changes.
  # Here's an explanation of the approach used. GitHub Actions workflows can
  # have path filters (i.e., the use of "paths:" keywords on event triggers),
  # and that *would* be the natural way to run workflows only when the relevant
  # files change â€“ except that the way GitHub branch protection rules work is:
  # "If a workflow is skipped due to path filtering [...] the checks associated
  # with that workflow will remain in a Pending state. A PR that requires those
  # checks to be successful will be blocked from merging." Our approach forgoes
  # path filters, and instead checks file changes using a preliminary job.
  decide:
    name: (Decide if format check is needed)
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    outputs:
      proceed: >-
        github.event_name == 'workflow_dispatch' || steps.changes.outputs.python
    steps:
      - if: github.event_name != 'workflow_dispatch'
        name: Check out a copy of the git repository
        uses: actions/checkout@v4

      - if: github.event_name != 'workflow_dispatch'
        name: Determine files changed by this ${{github.event_name}} event
        uses: dorny/paths-filter@v3
        id: changes
        with:
          base: ${{github.ref_name}}
          # Check for changes in Python files as well as the requirements file
          # (in case the required version of pylint has changed) and this
          # workflow (in case test options or something else changed).
          filters: |
            python:
              - '**/*.py'
              - dev-requirements.txt
              - .github/workflows/python_format.yml

  check-format:
    if: needs.decide.outputs.proceed
    name: Python format check
    needs: decide
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    steps:
      - name: Check out a copy of the git repository
        uses: actions/checkout@v4
        with:
          # Need the full git history for format-incremental.
          fetch-depth: 0

      - name: Set up Python with caching of pip dependencies
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'
          cache: pip
          cache-dependency-path: dev-requirements.txt

      - name: Install dev requirements
        run: pip install -r dev-requirements.txt

      - name: Check Python file format
        env:
          # SHELLOPTS is used by Bash. Add xtrace when doing manual debug runs.
          SHELLOPTS: ${{inputs.trace && 'xtrace' || '' }}
        run: check/format-incremental
